<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwConfigExceptions="true"
      internalLogLevel="Error"
      internalLogFile="Logs\internal-nlog.txt">
  <!--autoReload：修改后自动加载，可能会有延迟-->
  <!--throwConfigExceptions：NLog日志系统抛出异常-->
  <!--internalLogLevel：内部日志的级别-->
  <!--internalLogFile：内部日志保存路径，日志的内容大概就是NLog的版本信息，配置文件的地址等等-->
  <!--输出日志的配置，用于rules读取-->
  <!--通过数据库记录日志 配置
 dbProvider请选择mysql或是sqlserver，同时注意连接字符串,需要安装对应的sql数据提供程序
 MYSQL:
 dbProvider="MySql.Data.MySqlClient.MySqlConnection, MySql.Data"
 connectionString="server=localhost;database=BaseMIS;user=root;password=123456"
 MSSQL:
 dbProvider="Microsoft.Data.SqlClient"
 connectionString="Server=127.0.0.1;Database=BaseMIS;User ID=sa;Password=123456"
 -->

  <targets>
    <!--write logs to file-->
    <!--将日志写入文件中,fileName可以指定日志生成的路径-->
    <target xsi:type="File" name="allfile" fileName="Logs\nlog-all-${shortdate}.log"
             layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}" />
    <!--同样是将文件写入日志中，写入的内容有所差别，差别在layout属性中体现。写入日志的数量有差别，差别在路由逻辑中体现-->
    <target xsi:type="File" name="ownFile-web" fileName="Logs\nlog-my-${shortdate}.log"
             layout="${longdate}|${logger}|${uppercase:${level}}|${message} ${exception}" />
    <target xsi:type="Null" name="blackhole" />

    <target xsi:type="Database" name="database" dbProvider="MySql.Data.MySqlClient.MySqlConnection, MySql.Data">
      <connectionString>${var:connectionString}</connectionString>
      <commandText>
        insert into nlogrecs (Application,Levels,Operatingtime,Operatingaddress,Userid,Logger,Callsite,Requesturl,Referrerurl,Action,Message,Exception,LogContent)
        values (@application,@levels,@operatingtime,@operatingaddress,@userid,@logger,@callSite,@requesturl,@referrerurl,@action,@message,@exception,@logcontent);
      </commandText>
      <parameter name="@application" layout="WebApi" />
      <parameter name="@levels" layout="${level}" />
      <parameter name="@operatingTime" layout="${date}" />
      <parameter name="@operatingaddress" layout="${aspnet-Request-IP}" />
      <parameter name="@userid" layout="1" />
      <parameter name="@logger" layout="${logger}" />
      <parameter name="@callSite" layout="${callsite}" />
      <parameter name="@requesturl" layout="${aspnet-request-url}" />
      <parameter name="@referrerurl" layout="${aspnet-request}" />
      <parameter name="@action" layout="${aspnet-mvc-action}" />
      <parameter name="@message" layout="${message}" />
      <parameter name="@exception" layout="${exception:tostring}" />
      <parameter name="@logcontent" layout="${event-context:item=logcontent}"/>
    </target>
  </targets>
  <rules>
    <!--路由顺序会对日志打印产生影响。路由匹配逻辑为顺序匹配。-->
    <!--All logs, including from Microsoft-->
    <!--<logger name="*" minlevel="Trace" writeTo="allfile" />-->

    <!--Skip Microsoft logs and so log only own logs-->
    <!--以Microsoft打头的日志将进入此路由，由于此路由没有writeTo属性，所有会被忽略-->
    <!--且此路由设置了final，所以当此路由被匹配到时。不会再匹配此路由下面的路由。未匹配到此路由时才会继续匹配下一个路由-->
    <!--<logger name="Microsoft.*" minlevel="Trace"  final="true" />-->
    <!--上方已经过滤了所有Microsoft.*的日志，所以此处的日志只会打印除Microsoft.*外的日志-->
    <logger name="*" minlevel="Debug" writeTo="database" />
  </rules>
</nlog>